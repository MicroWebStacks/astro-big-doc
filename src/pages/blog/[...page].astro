---
import Layout from "@/layout/Layout.astro";
import {promises as fs} from 'fs';
import {resolve} from 'path';
import Panzoom from "@/components/panzoom.astro"
import Gallery from "@/components/gallery.astro"
import Page_404 from "@/components/404.astro"
import H1 from "@/components/headings/H1.astro"
import H2 from "@/components/headings/H2.astro"
import H3 from "@/components/headings/H3.astro"

const {page} = Astro.params;
console.log(`Astro> page ${page}`)
let found = true
let Post = null
const base_path = process.cwd()+'/data/blog/'
const page_path = resolve(base_path+page)

try {
  await fs.access(page_path)
} catch {
    console.log(`${page} does not exist`)
    found = false
}

if(found){
    const posts = import.meta.glob('../../../data/blog/**/*.{md,mdx}')//relative to this component file
    const component_path = process.cwd()+'/src/pages/blog/'
    const Post_path = Object.keys(posts).find((path)=>(resolve(component_path,path) == page_path))
    
    if((typeof Post_path == "undefined")){
        console.log(`${page} could not be imported`)
        found = false
    }
    if(found){
        Post = await posts[Post_path]()
    }
}

//Dummy to allow static build for test but not supported
export async function getStaticPaths(){
    function is_markdown(file){
        return (file.endsWith('.md')||file.endsWith('.mdx'))
    }
    const files = await fs.readdir('data/blog/')//relative to astro root
    return files.filter(file=>is_markdown(file)).map((file)=>({params:{page:file}}))
}


---
{Post &&
<Layout title={Post.frontmatter.title} headings={Post.getHeadings()}>
        <Post.Content components={{...Post.components, Gallery,Panzoom,data:Panzoom,h1:H1,h2:H2,h3:H3 }}/>
</Layout>
}
{!found &&
<Page_404 target={page}/>
}

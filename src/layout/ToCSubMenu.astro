---

export interface Props {
	items: Array<Object>;
    root:boolean;
}
const { items,root=true} = Astro.props;

---
{items &&
    <ul class={root?"root":"nested"}>
        {items.map((item)=>(
            <li >
                <a  href={item.href}
                    class:list={[{toc_href:true, active:item.active, parent:item.parent, expanded:item.expanded}]}
                    >
                    {item.parent &&
                        <span class="icon toc_expand">
                            <svg viewBox="0 0 100 100" width="60" height="60" fill="#00000000" xmlns="http://www.w3.org/2000/svg">
                                <path d="M 20,10 L 70,50 L 20,90" stroke-width="20px" stroke="#d0d0d0" stroke-linecap="round" stroke-linejoin="round"></path>
                            </svg>
                        </span>
                    }
                    <span class:list={[{"text":true,href_hover:item.parent}]}>
                        {item.text}
                    </span>
                </a>
                <Astro.self items={item.items} root={false} />
            </li>
        ))}
    </ul>
}
<style>
    :root {
        --span-hover: #606060;/* #2A2D2E */
        --svg-hover: #4d99cc;
    }
    a{
        padding:0px;
        padding-left:0px;
        text-decoration: none;
        user-select: none;    
        color:#CCCCCC;
        display:block;
    }
    /* active when nav menu item is matching url */
    a.active{
        background-color: #37373D;
    }
    a.toc_expand:hover, a:not(.parent):hover{
        background-color: var(--span-hover);
    }
    a.parent{
        cursor:pointer;
        display:flex;
    }
    span.icon{
        padding:10px;
        padding-top:5px;
        padding-bottom:5px;
        flex-grow:0;
    }
    span.text{
        padding:10px;
        padding-top:5px;
        padding-bottom:5px;
        flex-grow:1;
        display:block;
    }
    a.parent > span.text{
        padding-left: 0px;
    }

    span.icon > svg{
        width:16px;
        height:16px;
        rotate: 0deg;
        transition: rotate .4s ease-in-out;
    }
    a.parent.expanded > span > svg{
        rotate: 90deg;
    }
    span.toc_expand:hover{
        background-color: var(--span-hover);
    }
    span.toc_expand:hover > svg > path{
        stroke:var(--svg-hover);
    }
    a.toc_expand:hover > span.icon > svg > path{
        stroke: var(--svg-hover);
    }

    span.href_hover:hover{
        background-color: var(--span-hover);
    }
    ul{
        display:flex;
        flex-direction: column;
        list-style: none;
        margin:0px;
        padding: 0px;
    }
    ul.nested{
        padding-left: 3px;
        border-top:   0px;
        border-left:  2px solid rgb(122, 122, 122);
        border-right: 0px;
        border-bottom:0px;
        margin-left: 8px;
        overflow: hidden;
        max-height: 200vh;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    ul.nested.hidden{
        max-height: 0px;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    li{
        min-width: 130px;
    }

</style>


<script>
    //---------------   Click Expand   ---------------
    let toggler = document.getElementsByClassName("toc_expand");
    for (let i = 0; i < toggler.length; i++) {
      toggler[i].addEventListener("click", function(e) {
        this.parentElement.parentElement.querySelector("ul")?.classList.toggle("hidden");
        this.parentElement.classList.toggle("expanded");
        e.preventDefault()
      });
    }


    //---------------   Scroll Spy   ---------------
    function escape_href(href){
        //the # bothers CSS.escape in case of id starting with a number
        return `#${CSS.escape(href.replace('#',''))}`
    }

    const article = document.querySelector( 'article.content' )
    const hrefs = document.getElementsByClassName("toc_href");
    const targets = [...hrefs].map(el => article.querySelector(escape_href(el.getAttribute('href'))))
    
    article.addEventListener("scroll", (event) => {
        let spy = null//if no element on screen, keep last match and do nothing
        for ( let t in targets ){//find first within visible scroll
            if(targets[ t ].offsetTop > article.scrollTop){
                spy = targets[ t ]
                break
            }
        }
        if(spy){
            document.querySelector(".toc_href.active")?.classList.remove("active");
            const id = spy.id
            document.querySelector(`a[href="#${id}"]`)?.classList.add("active")
            //TODO Parallel active for headings
            //remove old active heading
            //spy.classList.add("active")
        }
    })
</script>

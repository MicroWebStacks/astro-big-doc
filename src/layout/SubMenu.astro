---
import './colors.css';

export interface Props {
	items: Array<Object>;
    root:boolean;
}
const { items,root=true} = Astro.props;
---
{items &&
    <ul class={root?"root":"nested"}>
        {items.map((item)=>(
            <li >
                <div class:list={[{entry_container:true, active:item.active, parent:item.parent, expanded:item.expanded}]}>
                    {item.parent &&
                        <span class="icon expand">
                            <svg viewBox="0 0 100 100" width="60" height="60" fill="#00000000" xmlns="http://www.w3.org/2000/svg">
                                <path d="M 20,10 L 70,50 L 20,90" stroke-width="20px" stroke="#d0d0d0" stroke-linecap="round" stroke-linejoin="round"></path>
                            </svg>
                        </span>
                    }
                    {Object.hasOwn(item,"href")?
                        <a  href={item.href}>
                            <span class:list={["text href_hover",{parent:item.parent}]}>{item.text}</span>
                        </a>:
                        <span class:list={["text",{parent:item.parent}]}>{item.text}</span>
                    }
                </div>
                <Astro.self items={item.items} root={false} />
            </li>
        ))}
    </ul>
}
<style>
    ul{
        display:flex;
        flex-direction: column;
        list-style: none;
        margin:0px;
        padding: 0px;
    }
    ul.nested{
        padding-left: 8px;
        border-top:   0px;
        border-left:  1px solid var(--menu-border-left-color);
        border-right: 0px;
        border-bottom:0px;
        margin-left: 8px;
        overflow: hidden;
        max-height: 200vh;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    ul.nested.hidden{
        max-height: 0px;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    li{
        min-width: 130px;
    }
    .entry_container{
        padding:0px;
        padding-left:0px;
        user-select: none;    
        color:var(--content-color);
        display:flex;
        align-items: center;
    }
    .entry_container>a{
        text-decoration: none;
        flex-grow: 1;
    }
    /* active when nav menu item is matching url */
    .entry_container.active{
        background-color: var(--menu-active-color);
    }
    span.icon{
        padding:3px;
        padding-right:5px;
        flex-grow: 0;
    }
    span.text{
        padding:2px;
        padding-top:3px;
        padding-bottom:3px;
        color:#bbb;
        display: block;
        flex-grow: 1;
    }
    span.text:not(.parent){
        padding:10px;
        padding-top:4px;
        padding-bottom:4px;
    }

    span.icon > svg{
        width:10px;
        height:10px;
        rotate: 0deg;
        transition: rotate .4s ease-in-out;
    }
    .entry_container.parent.expanded > span > svg{
        rotate: 90deg;
    }
    span.icon.expand:hover{
        background-color: var(--menu-span-hover-color);
        cursor: pointer;
    }
    span.text.href_hover:hover{
        background-color: var(--menu-span-hover-color);
    }

</style>


<script>
    //---------------   Click Expand   ---------------
    let toggler = document.getElementsByClassName("expand");
    for (let i = 0; i < toggler.length; i++) {
      toggler[i].addEventListener("click", function(e) {
        this.parentElement.parentElement.querySelector("ul")?.classList.toggle("hidden");
        this.parentElement.classList.toggle("expanded");
        e.preventDefault()
      });
    }


    //---------------   Scroll Spy   ---------------
    function escape_href(href){
        //the # bothers CSS.escape in case of id starting with a number
        return `#${CSS.escape(href.replace('#',''))}`
    }

    const article = document.querySelector( 'article.content' )
    const hrefs = document.getElementsByClassName("toc_href");
    const targets = [...hrefs].map(el => article.querySelector(escape_href(el.getAttribute('href'))))
    
    article.addEventListener("scroll", (event) => {
        let spy = null//if no element on screen, keep last match and do nothing
        for ( let t in targets ){//find first within visible scroll
            if(targets[ t ].offsetTop > article.scrollTop){
                spy = targets[ t ]
                break
            }
        }
        if(spy){
            document.querySelector(".toc_href.active")?.classList.remove("active");
            document.querySelector(".heading.active")?.classList.remove("active");
            const id = spy.id
            //console.log(id)
            document.querySelector(`a[href="#${id}"].toc_href`)?.classList.add("active")
            document.getElementById(id)?.classList.add("active")
        }
    })

    const href_els = document.querySelectorAll(".toc_href");
    href_els.forEach(element => {
        element.addEventListener('mouseenter',()=>{
            const href = element.getAttribute('href')
            const id = href.slice(1,href.length)
            document.getElementById(id)?.classList.add("hover")
        })        
        element.addEventListener('mouseout',()=>{
            const href = element.getAttribute('href')
            const id = href.slice(1,href.length)
            document.getElementById(id)?.classList.remove("hover")
        })        
    });
</script>

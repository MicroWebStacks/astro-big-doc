---

export interface Props {
	items: Array<Object>;
    root:boolean;
}
const { items,root=true,hidden=false } = Astro.props;
const baseUrl = import.meta.env.BASE_URL.slice(0, -1)
---
{items &&
    <ul class:list={[{root:root, nested:!root, hidden:hidden}]}>
        {items.map((item)=>(
            <li >
                <a  href={item.parent?"":baseUrl+item.href}
                    class:list={[{active:item.active, parent:item.parent, expanded:item.expanded, nav_expand:item.parent}]}
                    >
                    {item.parent &&
                        <span class="icon">
                            <svg viewBox="0 0 100 100" width="60" height="60" fill="#00000000" xmlns="http://www.w3.org/2000/svg">
                                <path d="M 20,10 L 70,50 L 20,90" stroke-width="20px" stroke="#d0d0d0" stroke-linecap="round" stroke-linejoin="round"></path>
                            </svg>
                        </span>
                        //<object class="icon closed hidden" data="/folders-svgrepo-com.svg" type="image/svg+xml"/>
                        //<object class="icon open" data="/openfilefolder-svgrepo-com.svg" type="image/svg+xml"/>
                    }
                    <span class="text">
                        {item.text}
                    </span>
                </a>
                <Astro.self items={item.items} root={false} hidden={!item.expanded}/>
            </li>
        ))}
    </ul>
}
<style>
    :root {
        --span-hover: #606060;/* #2A2D2E */
        --svg-hover: #4d99cc;
        --radius: 10px;
    }

    a{
        padding:0px;
        padding-left:0px;
        text-decoration: none;
        user-select: none;    
        color:#CCCCCC;
        display:block;
    }
    /* active when nav menu item is matching url */
    a.active{
        background-color: #37373D;
    }
    a.nav_expand:hover, a:not(.parent):hover{
        background-color: var(--span-hover);
    }
    a.parent{
        cursor:pointer;
        display:flex;
        align-items:center;
    }
    span.icon{
        padding:10px;
        padding-top:5px;
        padding-bottom:5px;
        flex-grow:0;
    }
    span.text{
        padding:10px;
        padding-top:5px;
        padding-bottom:5px;
        flex-grow:1;
        display:block;
    }
    a.parent > span.text{
        padding-left: 0px;
    }

    span.icon > svg{
        width:16px;
        height:16px;
        rotate: 0deg;
        transition: rotate .4s ease-in-out;
    }
    object.icon{
        width:16px;
        height:16px;
        padding-bottom:5px;
    }
    a.parent.expanded > span > svg{
        rotate: 90deg;
    }
    span.nav_expand:hover{
        background-color: var(--span-hover);
    }
    span.nav_expand:hover > svg > path{
        stroke:var(--svg-hover);
    }
    a.nav_expand:hover > span.icon > svg > path{
        stroke: var(--svg-hover);
    }

    span.href_hover:hover{
        background-color: var(--span-hover);
    }
    ul{
        display:flex;
        flex-direction: column;
        list-style: none;
        margin:0px;
        padding: 0px;
    }
    ul.nested{
        padding-left: 3px;
        border-top:   0px;
        border-left:  2px solid rgb(122, 122, 122);
        border-right: 0px;
        border-bottom:0px;
        margin-left: 8px;
        overflow: hidden;
        max-height: 200vh;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    ul.nested.hidden{
        max-height: 0px;
        transition-property: max-height;
        transition-duration: 0.4s;
    }
    li{
        min-width: 130px;
    }
    object.hidden{
        display:flex;
        visibility: collapse;
    }
    ul.root > li{
        margin: 5px;
        box-shadow: 2px 2px 4px 2px rgba(145, 144, 144, 0.5);
        border-radius: var(--radius);
        overflow: hidden;
    }
   
</style>


<script>
    //This script is here and not under Submenu to make it run only once
    let toggler = document.getElementsByClassName("nav_expand");
    for (let i = 0; i < toggler.length; i++) {
      toggler[i].addEventListener("click", function(e) {
        const ul = this.parentElement.querySelector("ul")
        ul.classList.toggle("hidden");
        if(ul.classList.contains("hidden")){
            this.classList.remove("expanded");
        }else{
            this.classList.add("expanded");
        }
        e.preventDefault()
      });
    }
</script>
---
import {existsSync,readFileSync} from 'fs';
import {relAssetToUrl} from '../libs/utils'

export interface Props {
  'data-filename': string;
  'data-filedir': string;
    expanded: boolean;
}


const { 'data-filename':filename,'data-filedir':filedir,expanded } = Astro.props as Props;
const filepath = filedir+'/'+filename
const json_text = existsSync(filepath)?readFileSync(filepath).toString():"[]"
const relImages = JSON.parse(json_text)

const imagesUrls = relImages.map((relFile)=>({
        file:relFile,
        url:relAssetToUrl(relFile,filedir,import.meta.env.BASE_URL)
    }))
---

<div class="container" data-filename={filename}>
    <button class="collapsible">
        {expanded?"Click to close":"Click to expand"}
    </button>
    <div class={`content ${expanded?"expanded":""}`}>
        <div class="itemscontainer">
            {imagesUrls.map((image)=>(
                <div class="item">
                    <div class="itemimage">
                        <object data={image.url} />
                    </div>
                    <div class="overlay">{image.file}</div>
                </div>
            ))}
        </div>
    </div>
</div>

<style>
.container{
    background:rgb(134, 134, 134);
    padding:5px;
    border-radius: 5px;
}
.collapsible{
    color:white;
    text-align: left;
    background: #333333;
    border: none;
    cursor: pointer;
    width:100%;
    padding: 10px;
}
.collapsible:hover{
    background-color: #545454;
    transition: background-color 0.3s;
}
.content{
    background:rgb(43, 43, 43);
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.2s ease-out;
}
.content.expanded{
    max-height: 600px;
}
.itemscontainer{
    padding:10px;
    display:flex;
    flex-wrap: wrap;
    gap: 10px 10px;
}
.item{
    cursor:pointer;
}
.itemimage:hover{
    scale: 1.1;
    transition: scale 0.5s;
}
.item:hover > .overlay{
    display: block;
}
.item:hover > .itemimage{
    filter:brightness(100%);
}
.itemimage{
    filter:brightness(80%);
    width:150px;
    height:150px;
}

.overlay{
    padding:5px;
    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;
    color:white;
    max-width: 150px;
}
object{
    pointer-events: none;
    max-height: 100%;
    max-width: 100%;
}
</style>

<script define:vars={{ filename }} >
    const container = document.querySelector(`.container[data-filename="${filename}"]`)
    const collapsible = container.querySelector(".collapsible")
    const content = container.querySelector(".content")
    collapsible.onclick = ()=>{
        content.classList.toggle("expanded")
        if (content.classList.contains("expanded")){
            //*2 speeds up the animation but resolves the resize problem without actively watching the resize
            content.style.maxHeight = content.scrollHeight*2 + "px";
            collapsible.textContent = "Click to close"
        } else {
            content.style.maxHeight = null;
            collapsible.textContent = "Click to expand"
        }
        console.log(content.style.maxHeight)
    }
</script>
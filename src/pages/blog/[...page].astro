---
import Layout from "@/layout/Layout.astro";
import {existsSync,readdirSync} from 'fs';
import {resolve} from 'path';
import Panzoom from "@/components/panzoom.astro"
import Gallery from "@/components/gallery.astro"
import {session_user} from "../../../server/auth/auth_utils"

const {page} = Astro.params;
console.log(`Astro> page ${page}`)

const user = session_user(Astro.request) //also adds .user to Astro.request
if(user){
    console.log(`Astro> [...page] hello user ${user}`)
}
const base_path = process.cwd()+'/data/blog/'
const page_path = resolve(base_path+page)

if(!existsSync(page_path)){
    console.log(`${page} does not exist`)
    return Astro.redirect("/")
}

const posts = import.meta.glob('../../../data/blog/**/*.{md,mdx}')//relative to this component file
const component_path = process.cwd()+'/src/pages/blog/'
const Post_path = Object.keys(posts).find((path)=>(resolve(component_path,path) == page_path))

if((typeof Post_path == "undefined")){
    console.log(`${page} could not be imported`)
    return Astro.redirect("/")
}

const Post = await posts[Post_path]()
//TODO if user authorised to view the page, otherwise redirect

//Dummy to allow static build for test but not supported
export async function getStaticPaths(){
    const files = readdirSync('data/blog/')//relative to astro root
    return files.filter(file=>file.endsWith('.mdx')).map((file)=>({params:{page:file}}))
}

---
{Post &&
<Layout title={Post.frontmatter.title} headings={Post.getHeadings()}>
        <Post.Content components={{...Post.components, Gallery,Panzoom,data:Panzoom }}/>
</Layout>
}
